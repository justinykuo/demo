import Head from "next/head";
import events from '../../data/events.json';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import { Button, Paper } from '@mui/material';
import { useState, useEffect } from "react";

export async function getServerSideProps(context) {
  return {
    props: {

    }
  };
}
export default function Page() {
  const [selectedEvent, setSelectedEvent] = useState(false);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        setLoading(true);
        setError(null);
        let id = selectedEvent[0].substring(0, selectedEvent[0].indexOf('/'));

        const response = await fetch(`/api/user/${id}`);

        if (!response.ok) {
          throw new Error("Failed to fetch events");
        }

        const data = await response.json();
        setUser(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

      if (selectedEvent) {
        fetchUser();
      }
  }, [selectedEvent]);

  // Use a Set to get unique events
  const seen = new Set();
  const uniqueEvents = [];

  events.forEach(event => {
    const uniqueKey = `${event.event}-${event.distinct_id}-${event.timestamp}`;
    if (!seen.has(uniqueKey)) {
      seen.add(uniqueKey);
      uniqueEvents.push(event);
    }
  });

  const columns = [
    { field: 'event', headerName: 'Event', width: 200 },
    { field: 'distinct_id', headerName: 'Distinct IDs', width: 330 },
    { field: 'timestamp', headerName: 'Timestamp', width: 330 },
    {
      field: 'properties',
      headerName: 'Properties',
      description: 'This column has a value getter and is not sortable.',
      sortable: false,
      width: 560,
      valueGetter: (value, row) => {
        return `${JSON.stringify(row.properties)}`
      },
    },
  ];

  const paginationModel = { page: 0, pageSize: 50 };
  return (
    <>
      <Head>
        <title>Justin Kuo Posthog Demo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <Paper sx={{ height: 600, width: '100%' }}>
        <DataGrid
          slots={{ toolbar: GridToolbar }}
          getRowId={(row) => `${row.distinct_id}/${row.event}/${row.timestamp}`}
          rows={uniqueEvents}
          columns={columns}
          checkboxSelection
          disableMultipleRowSelection
          sx={{ border: 0 }}
          initialState={{ pagination: { paginationModel } }}
          pageSizeOptions={[50, 100]}
          onRowSelectionModelChange={(id) => {
            setSelectedEvent(id);
          }}
        />
      </Paper>
      {loading && (
        <p>Loading events...</p>
      )}
      {error && (
        <p>Error: {error}</p>
      )}
      {user && (
          <>
            <h4>User for selected event: {JSON.stringify(user)}</h4>
          </>
        )}
      </main>
      <style jsx>{`

    `}</style>
    </>
  );
}
